# -*- coding: utf-8 -*-
"""
–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ:
‚Ä¢ ASSET: qty
   –¶–µ–Ω–∞: price  |  –í—Ö–æ–¥: entry
   P/L: pl
–í–Ω–∏–∑—É ‚Äî —Å—Ç—Ä–æ–∫–∞ üíµ USDT: ... (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å.
"""

from typing import Dict, List, Tuple
from decimal import Decimal, InvalidOperation

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ mexc_client –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ö–æ–¥–æ–≤
from mexc_client import get_account_info, get_ticker_price

try:
    from settings_manager import load_settings  # –æ–∂–∏–¥–∞–µ—Ç—Å—è {"entries": {"BTCUSDT": 111000.0, ...}}
except Exception:
    def load_settings():
        return {"entries": {}}


# ---------- —É—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ----------

def _to_dec(x) -> Decimal:
    try:
        return Decimal(str(x))
    except InvalidOperation:
        return Decimal(0)

def _fmt_thousands(s: str) -> str:
    # –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è ¬´1 234 567.89¬ª
    return s.replace(",", " ")

def _fmt_qty(x: float) -> str:
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 8 –∑–Ω–∞–∫–æ–≤ (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ: 312,944.92000000, 5,660.48000000 –∏ —Ç.–ø.)
    d = _to_dec(x)
    s = f"{d:,.8f}"
    # –Ω–µ —É–±–∏—Ä–∞–µ–º –Ω—É–ª–∏ ‚Äî –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ –±—ã–ª–æ ¬´–∫–∞–∫ —Ä–∞–Ω—å—à–µ¬ª
    return _fmt_thousands(s)

def _fmt_price(x: float) -> str:
    d = _to_dec(x)
    if d == 0:
        return "0"
    # –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Ü–µ–Ω (BTC) ‚Äî –±–µ–∑ –¥—Ä–æ–±–Ω–æ–π ¬´–ª–µ—Å–µ–Ω–∫–∏¬ª (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ ¬´111 756¬ª),
    # –¥–ª—è –º–µ–ª–∫–∏—Ö ‚Äî –¥–æ 6 –∑–Ω–∞–∫–æ–≤.
    if abs(d) >= 1000:
        s = f"{d:,.0f}"
    elif abs(d) >= 1:
        s = f"{d:,.4f}".rstrip("0").rstrip(".")  # 0.03497 -> "0.03497", 1.2300 -> "1.23"
    else:
        s = f"{d:.6f}".rstrip("0").rstrip(".")
    return _fmt_thousands(s)

def _fmt_money2(x: float) -> str:
    d = _to_dec(x)
    s = f"{d:,.2f}"
    return _fmt_thousands(s)

def _fmt_pl_percent(price: float, entry: float) -> str:
    if entry > 0 and price > 0:
        pct = (price / entry - 1) * 100
        return f"{pct:.2f}%"
    return "n/a"


# ---------- –¥–∞–Ω–Ω—ã–µ ----------

def _collect_balances() -> Dict[str, float]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å asset -> qty (free+locked), —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ.
    """
    acc = get_account_info()
    result: Dict[str, float] = {}
    for b in acc.get("balances", []):
        asset = (b.get("asset") or "").upper()
        qty = float(b.get("free", 0) or 0) + float(b.get("locked", 0) or 0)
        if asset and qty > 0:
            result[asset] = result.get(asset, 0.0) + qty
    return result

def _price_usdt(asset: str) -> float:
    if asset.upper() == "USDT":
        return 1.0
    symbol = f"{asset.upper()}USDT"
    try:
        p = get_ticker_price(symbol)
        return float(p or 0.0)
    except Exception:
        return 0.0

def _load_entries_map() -> Dict[str, float]:
    s = load_settings() or {}
    entries = s.get("entries", {}) or {}
    clean = {}
    for k, v in entries.items():
        try:
            clean[str(k).upper()] = float(v)
        except Exception:
            pass
    return clean


# ---------- –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä ----------

def calc_portfolio_text() -> str:
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∏–¥ ¬´–∫–∞–∫ —Ä–∞–Ω—å—à–µ¬ª, + –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –í—Ö–æ–¥/P&L.
    """
    try:
        balances = _collect_balances()
        if not balances:
            return "üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –Ω–∞ —Å–ø–æ—Ç–µ."

        entries = _load_entries_map()

        # –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏: (asset, qty, price, cost, entry, pl_usdt)
        rows: List[Tuple[str, float, float, float, float, float]] = []
        for asset, qty in balances.items():
            price = _price_usdt(asset)
            cost = qty * price
            entry = entries.get(f"{asset}USDT", 0.0)
            pl_usdt = qty * (price - entry) if (entry > 0 and price > 0) else 0.0
            rows.append((asset, qty, price, cost, entry, pl_usdt))

        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ¬´–∫–∞–∫ —É —Ç–µ–±—è –≤–∏–∑—É–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–ª–æ—Å—å¬ª ‚Äî –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é,
        # –Ω–æ USDT –ø—É—Å—Ç—å –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å–Ω–∏–∑—É.
        usdt_qty = balances.get("USDT", 0.0)
        body_rows = [r for r in rows if r[0] != "USDT"]
        body_rows.sort(key=lambda r: r[3], reverse=True)

        total = sum(r[3] for r in body_rows) + (usdt_qty * 1.0)

        # —Ä–µ–Ω–¥–µ—Ä –ø–æ–∑–∏—Ü–∏–π
        lines: List[str] = ["üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å", ""]
        for asset, qty, price, _cost, entry, pl_usdt in body_rows:
            # –í –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–°—Ç–æ–∏–º–æ—Å—Ç—å/–î–æ–ª—è¬ª (—Ç–æ–ª—å–∫–æ –∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            # –ë–ª–æ–∫ –∏–∑ —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫ –Ω–∞ –∞–∫—Ç–∏–≤
            lines.append(f"‚Ä¢ {asset}: {_fmt_qty(qty)}")
            lines.append(f"   –¶–µ–Ω–∞: {_fmt_price(price)}  |  –í—Ö–æ–¥: {(_fmt_price(entry) if entry > 0 else 'n/a')}")
            if entry > 0 and price > 0:
                pl_pct = _fmt_pl_percent(price, entry)
                lines.append(f"   P/L: {pl_pct} ({_fmt_money2(pl_usdt)} USDT)")
            else:
                lines.append("   P/L: n/a")
            lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏

        # –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ¬´üíµ USDT: ...¬ª (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ)
        if usdt_qty > 0:
            lines.append(f"üíµ USDT: {_fmt_qty(usdt_qty)}")
            lines.append("")

        # –∏—Ç–æ–≥
        lines.append(f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {_fmt_money2(total)} USDT")

        return "\n".join(lines)

    except Exception as e:
        msg = str(e).replace("<", "").replace(">", "")
        return f"–û—à–∏–±–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {msg}"
